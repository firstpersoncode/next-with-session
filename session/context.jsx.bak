import { createContext, useContext, useRef, useState } from "react";
import HCaptcha from "@hcaptcha/react-hcaptcha";
import axios from "axios";

const context = {
  session: {},
  captchaCallbacks: {},
  eventRef: undefined,
};

const SessionContext = createContext(context);

const useContextController = (initialContext = context) => {
  const [ctx, setContext] = useState(initialContext);
  const captcha = useRef();

  const resetCaptcha = () => {
    captcha.current.resetCaptcha();
  };

  const executeCaptcha = () => {
    captcha.current.execute();
  };

  const setActiveEvent = (eventRef) => {
    setContext((v) => ({ ...v, eventRef }));
  };

  const initCaptcha = async (
    endpoint,
    body,
    onCaptchaSuccess,
    onCaptchaError
  ) => {
    if (!ctx.eventRef) throw new Error("Active eventRef required");

    const repeatedEvent = ctx.session.events.find(
      (e) => e.ref === ctx.eventRef
    );

    if (!Boolean(repeatedEvent)) {
      try {
        const response = await axios.post(
          `${endpoint}/?eventRef=${ctx.eventRef}`,
          body
        );
        if (typeof onCaptchaSuccess === "function")
          return onCaptchaSuccess(response);
      } catch (err) {
        console.error(err);
        if (typeof onCaptchaError === "function") return onCaptchaError(err);
      }
    } else {
      setContext((v) => ({
        ...v,
        captchaCallbacks: {
          endpoint,
          body,
          onCaptchaSuccess,
          onCaptchaError,
        },
      }));
      return executeCaptcha();
    }
  };

  const onCaptchaVerify = async (ct) => {
    if (!ctx.captchaCallbacks)
      throw new Error("Unable to verify captcha, missing callbacks");
    const { endpoint, body, onCaptchaSuccess, onCaptchaError } =
      ctx.captchaCallbacks;

    try {
      const response = await axios.post(`${endpoint}/?ct=${ct}`, body);
      if (typeof onCaptchaSuccess === "function") {
        onCaptchaSuccess(response);
      }
    } catch (err) {
      if (typeof onCaptchaError === "function") {
        onCaptchaError(err);
      }
    } finally {
      resetCaptcha();
    }
  };

  return {
    ...ctx,
    captcha,
    executeCaptcha,
    resetCaptcha,
    setActiveEvent,
    onCaptchaVerify,
    initCaptcha,
  };
};

export function SessionContextProvider({ children, context: initialContext }) {
  const { captcha, resetCaptcha, onCaptchaVerify, ...controlledContext } =
    useContextController(initialContext);

  return (
    <SessionContext.Provider value={controlledContext}>
      {children}
      <HCaptcha
        ref={captcha}
        size="invisible"
        sitekey={process.env.HCAPTCHA_SITE_KEY}
        onVerify={onCaptchaVerify}
        onError={resetCaptcha}
        onClose={resetCaptcha}
        onChalExpired={resetCaptcha}
      />
    </SessionContext.Provider>
  );
}

export const useSessionContext = () => useContext(SessionContext);
